<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML有点东西</title>
      <link href="/2019/08/09/HTML%E6%9C%89%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
      <url>/2019/08/09/HTML%E6%9C%89%E7%82%B9%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>#video+source</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#iframe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合springMybatis</title>
      <link href="/2019/08/09/springmybatis1/"/>
      <url>/2019/08/09/springmybatis1/</url>
      
        <content type="html"><![CDATA[<h1 id="整合SpringMyBatis"><a href="#整合SpringMyBatis" class="headerlink" title="整合SpringMyBatis"></a>整合SpringMyBatis</h1><p>整合分为一下4部分</p><p>1.spring-config 数据源 事务 mybatis位置 与sqlsessionFactory工厂<br>2.mybatis-config iDaoMapper.xml文件 并有接口<br>3.iDaoMapper Dao 接口与mapper文件id相同 ，Dao用会话工厂调用sql<br>4.main 调用操作</p><h2 id="0-db-properties"><a href="#0-db-properties" class="headerlink" title="0 db.properties"></a>0 db.properties</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = oracle.jdbc.driver.OracleDriver</span><br><span class="line">url = jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">user=c##scott</span><br><span class="line">pswd=tiger</span><br></pre></td></tr></table></figure></code></pre><h2 id="1-spring-config"><a href="#1-spring-config" class="headerlink" title="1.spring-config"></a>1.spring-config</h2><pre><code>主要包含数据源的配置，连接数据库用（dirver，url，user，password）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--/数据库链接信息--&gt;</span><br><span class="line">  &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;</span><br><span class="line">&lt;!--数据源--&gt;</span><br><span class="line">  &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;username&quot; value=&quot;$&#123;user&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;$&#123;pswd&#125;&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure> 其次是数据库的事务配置 并且要开启注解方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--事务管理器--&gt;</span><br><span class="line"> &lt;bean id=&quot;transacationManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!--开启事务注解--&gt;</span><br><span class="line"> &lt;tx:annotation-driven transaction-manager=&quot;transacationManager&quot;/&gt;</span><br></pre></td></tr></table></figure>再有就是要包含SQLsession会话工厂，包含mybatis-config配置的位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis-config+工厂sqlsessionFactory--&gt;</span><br><span class="line"> &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">     &lt;property name=&quot;configLocation&quot; value=&quot;MyBconfig.xml&quot;/&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure>// 需要注意的是事务管理器与sql会话工厂都需要数据源的注入</code></pre><h2 id="2-mybatis-config-iDaoMapper-xml"><a href="#2-mybatis-config-iDaoMapper-xml" class="headerlink" title="2.mybatis-config iDaoMapper.xml"></a>2.mybatis-config iDaoMapper.xml</h2><pre><code>一旦数据源交给spring-config处理后mybatis接近于被架空只会专注于sql的处理mybatis-config只求sql映射文件在哪里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   &lt;mappers&gt;</span><br><span class="line">      &lt;mapper resource=&quot;com\dao\empMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>而被mybatis-config管理的mapper文件只负责sql语句的拼接与处理需要指定mapper的namespace命名空间为同名文件名DaoMapper接口*注意（1.Daomapper.xml与Daomapper.java接口同名    2.有什么标签 接口里就要由于其id同名的方法）    这样在配置文件中就可以直接用SqlSessionFacory.getMapper获得的Dao调用接口中的方法即可操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.dao.empMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryall&quot; parameterType=&quot;String&quot; </span><br><span class="line">            resultType=&quot;com.pojo.Emp&quot;&gt;</span><br><span class="line">        select * from emp</span><br><span class="line">        &lt;!--  &lt;where&gt; </span><br><span class="line">              &lt;if test=&quot;ename !=null and ename !=&apos;&apos;&quot;&gt;</span><br><span class="line">                  and ename like #&#123;ename&#125;</span><br><span class="line">              &lt;/if&gt;</span><br><span class="line">          &lt;/where&gt;--&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id="3-iDaoMapper-Dao"><a href="#3-iDaoMapper-Dao" class="headerlink" title="3.iDaoMapper Dao"></a>3.iDaoMapper Dao</h2><p>mapper文件有什么sql操作标签接口就有什么抽象方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface empMapper &#123;</span><br><span class="line">    public List&lt;Emp&gt; queryall(Emp emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本以为没有什么要说的，看到代码想起来，接口就这么简单<br>到了Daoimpl层实现类不仅要实现接口，还要获取sql会话工厂SQLSessionFactory，这样才能真正实现Dao层，<br>还是和以前走过的路一样使用SQL会话工厂去调用mapper文件的sql语句<br>在这里继承了SqlsessionDaosupport会话Dao端口就可以直接用this关键字进行对Mapper调用操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class EmpDao extends SqlSessionDaoSupport implements empMapper &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Emp&gt; queryall(Emp emp) &#123;</span><br><span class="line">        return this.getSqlSession().selectList(&quot;queryall&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-main"><a href="#4-main" class="headerlink" title="4.main"></a>4.main</h2><p>Service层用到什么样的业务去调用相应Dao并进行相应的判断等业务即可<br>我在这里使用Bean实例化Dao层并注入sqlsession来实现调用Dao层，来进行相应的业务测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;emp1&quot;  class=&quot;com.dao.EmpDao&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    main:</span><br><span class="line">       EmpDao empDao=new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;).getBean(&quot;emp1&quot;, EmpDao.class);</span><br><span class="line">       </span><br><span class="line">       List&lt;Emp&gt; ls=empDao.queryall();</span><br><span class="line">       System.out.println(ls);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试iframe</title>
      <link href="/2019/08/07/%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/08/07/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">                        </span><br><span class="line">                        </span><br><span class="line">style=&quot;margin-left: 2px; margin-bottom:-5px;&quot;</span><br><span class="line">                        frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;1200px&quot; height=&quot;2000px&quot;</span><br><span class="line">src=&quot;https://www.bilibili.com/video/av53567787/&quot;&gt; //?redirectFrom=h5&quot; 重定项</span><br><span class="line">                    &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=53567787&cid=93812880&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="1200px" height="900px" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=6117110&cid=9931722&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="1200px" height="800px" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> iframe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AspectJ补充</title>
      <link href="/2019/08/07/AspectJ%E8%A1%A5%E5%85%85/"/>
      <url>/2019/08/07/AspectJ%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<p>#AspectJ补充的面向切面<br>***** 1<br>class Log implements MethodBeforeAdvice,AfterReturningAdvice<br>xml:<a href="aop:config" target="_blank" rel="noopener">aop:config</a><br>        &lt;aop:pointcut id=”mpp” expression=”execution(“”)”/&gt;<br>        &lt;aop:advisor  pointcut-ref=”daopointcut” advice-ref=”log1(切面Bean)”/&gt;//顾问<br>    &lt;/&gt;<br>实现前置与后置通知 此时就直接调用公共方法Log<br>                                            xml.1 <a href="aop:config" target="_blank" rel="noopener">aop:config</a>&lt;aop:aspectJ …ref=切面&gt;&lt;aop:pointcut 签名点&gt;<br>_____ 2<br>注解方式:先开启组件扫描&lt;Context:component-scan base-package=’’/&gt;<br>@Aspect   日志切面<br>public Class Log </p><pre><code>切点@Pointcut(&quot;表达式&quot;)  ==&gt;&quot;execution(* *(..))&quot;public void doPointCut(){}//相当于定义切点的id@Before（“doPointCut()”）public void beforeDao（）{sout（“我是前置通知”）}@Around...省略了 重用切入点前    jointPoint.proceed..环绕. 后</code></pre><p>xml：<a href="aop:aspectJ-autoproxy/" target="_blank" rel="noopener">aop:aspectJ-autoproxy/</a>自动代理aspectJ</p>]]></content>
      
      
      <categories>
          
          <category> 文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AspectJ补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBaties无configuration版</title>
      <link href="/2019/08/07/MyBaties%E6%97%A0configuration%E7%89%88/"/>
      <url>/2019/08/07/MyBaties%E6%97%A0configuration%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>##MyBaties无configuration版<br>configuration的xml标签都是可以解析成对象的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DataSource datasource=new      PooledDataSource(&quot;oracle.jdbc.driver.OracleDriver&quot;,&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;,&quot;c##scott&quot;,&quot;tiger&quot;);</span><br><span class="line">TransactionFactory transactionFactory=new JdbcTransactionFactory();</span><br><span class="line">Environment environment=new Environment(&quot;oracle&quot;, transactionFactory, datasource);</span><br><span class="line">Configuration configuration=new Configuration(environment);</span><br><span class="line"></span><br><span class="line">configuration.addMapper(IEmpMapper.class);</span><br><span class="line">SqlSessionFactory sf=new SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">SqlSession ss=sf.openSession();</span><br><span class="line">IEmpMapper iemp= ss.getMapper(IEmpMapper.class);</span><br><span class="line">iemp.insert(new Emp(1002, &quot;松江&quot;));</span><br><span class="line">ss.commit();</span><br><span class="line">ss.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello-world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="/2019/08/01/Hexo+Github/"/>
      <url>/2019/08/01/Hexo+Github/</url>
      
        <content type="html"><![CDATA[<p>安装node + git ==》Hexo</p><p>创建库 花时间<br><code>hexo init smallyan.github.io</code></p><p>##打开库文件位置<br><code>cd smallyan.github.io</code></p><p>#安装一些依赖（不写）安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。<br>npm install 也支持直接输入 Github 代码库地址<br>npm install</p><p>##运行本地 Hexo 服务<br><code>hexo server或者hexo s</code></p><p>生成SSH keys==&gt;<br><code>ssh-keygen -t rsa -C &quot;tenggeli999@163.com&quot;</code></p><p>##已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br>git config –global user.name “dbin1573”<br>git config –global user.email “<a href="mailto:tenggeli999@163.com" target="_blank" rel="noopener">tenggeli999@163.com</a>“</p><p>##配置根目录下的_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git </span><br><span class="line">repo: git@github.com:dbin1573/smallyan.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>本地文件提交到 GitHub Pages// 删除旧的 public 文件hexo clean// 生成新的 public 文件hexo generate或者hexo g// 开始部署hexo deploye或者hexo d</p><p>#部署 及部署错误<br><code>$ hexo d</code><br>ERROR Deployer not found: git<br><code>npm install --save hexo-deployer-git</code></p><p>#下载的3-hexo主题 后打开文件位置<br><em>使用git 的clone github的地址 _ 到新的地址</em><br><code>$ git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</code><br><code>$ cd themes/3-hexo/</code></p><h1 id="你的头像url"><a href="#你的头像url" class="headerlink" title="你的头像url"></a>你的头像url</h1><ol><li>替换 source/img/avatar.jpg 图片。</li><li>修改 _config.yml 中头像的配置记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avatar: /img/avatar.jpg</span><br><span class="line">favicon: /img/avatar.jpg</span><br><span class="line"></span><br><span class="line">git pull //在修改完资源后使用</span><br><span class="line">hexo d -g//-g编译 d部署</span><br></pre></td></tr></table></figure></li></ol><p>#关于页面<br>在 hexo 根目录执行以下，创建 关于 页面<br><code>hexo new page &quot;about&quot;</code></p><p>*部署并初始化<br>*1.发布 hexo<br><code>$`` hexo clear &amp;&amp; hexo g &amp;&amp; hexo d</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（clone是将一个库复制到你的本地，是一个本地从无到有的过程）</span><br><span class="line">从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（pull是指同步一个在你本地有版本的库内容更新的部分到你的本地库）</span><br></pre></td></tr></table></figure><p>##留言系统<br>在根Setting中[Settings Developer OAuthApps]中先注册好gitment填好name,url,最重要的是CallBack 的URL<br>Authorization callback URL :例如:<a href="https://dbin.xyz/">https://dbin.xyz/</a><br><code>引入代码</code> 配置上GitHub账号 库 两个client信息(id secret)即可</p><p> 引入 photoSwipe 图片相册，可在 _config 中 配置 img_resize: photoSwipe</p><p>Step 0: 基本了解 + 准备工作<br>我们打开hexo所在目录 -&gt; source -&gt; _posts, 可以看到一个hello-world.md文件，这就是hexo自动帮我们生成的第一篇文章。<br>回到hexo文件夹，就是里面有_config.yml, source, themes等等的那个。<br>用hexo server来启动本地预览，在浏览器输入<a href="http://localhost:4000/即可。" target="_blank" rel="noopener">http://localhost:4000/即可。</a></p><p>Step 1: 创建.md类型的文章<br>创建.md文章方式。</p><p>(推荐使用)</p><p>1.通过csdn，查看</p><p>2.通过atom软件</p><p>3.通过sublime</p><p>Step 2: 放在文章管理目录下</p><h2 id="放入hexo所在目录-gt-source-gt-posts下"><a href="#放入hexo所在目录-gt-source-gt-posts下" class="headerlink" title="放入hexo所在目录 -&gt; source -&gt; _posts下"></a>放入hexo所在目录 -&gt; source -&gt; _posts下</h2><p>searchAll: true</p><h1 id="true-启用全文搜索"><a href="#true-启用全文搜索" class="headerlink" title="true 启用全文搜索"></a>true 启用全文搜索</h1><h1 id="开启此功能需要下面操作："><a href="#开启此功能需要下面操作：" class="headerlink" title="开启此功能需要下面操作："></a>开启此功能需要下面操作：</h1><h1 id="1-在-hexo-根目录-执行-npm-install-hexo-generator-search-–save-安装插件"><a href="#1-在-hexo-根目录-执行-npm-install-hexo-generator-search-–save-安装插件" class="headerlink" title="1. 在 hexo 根目录 执行 npm install hexo-generator-search –save 安装插件"></a>1. 在 hexo 根目录 执行 npm install hexo-generator-search –save 安装插件</h1><h1 id="2-在-hexo-根目录的-config-xml-中添加下面内容"><a href="#2-在-hexo-根目录的-config-xml-中添加下面内容" class="headerlink" title="2. 在 hexo 根目录的 _config.xml 中添加下面内容"></a>2. 在 hexo 根目录的 _config.xml 中添加下面内容</h1><h1 id="search"><a href="#search" class="headerlink" title="search:"></a>search:</h1><h1 id="path-search-xml"><a href="#path-search-xml" class="headerlink" title="path: search.xml"></a>path: search.xml</h1><h1 id="field-post"><a href="#field-post" class="headerlink" title="field: post"></a>field: post</h1><p> categories:文集，为左侧列表<br>tags:标签，通过#来筛选 -a -b  [a,b]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">-a</span><br><span class="line">-b</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>##快捷命令<br>其实就通过alias，触发一些命令的集合<br>在 ~/.bashrc 文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias hs=&apos;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&apos;  #启动本地服务</span><br><span class="line">alias hd=&apos;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&apos;  #部署博客</span><br></pre></td></tr></table></figure><p>标题：#后跟一个空格表示一级标题，<br>二级标题就是两个#，依次类推<br>分割线：连续三个以上-<br>图片：<img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片alt" title="图片title"><br>超链接：<a href="超链接地址" title="超链接title">超链接名</a><br>列表：数字加点加空格<br>单行代码：反引号包围代码内容，如<code>System.currentTimeMillis()</code><br>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>字体加粗：要加粗的文字左右分别用两个*号包起来</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Hexo+GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c3p0简单配置</title>
      <link href="/2019/08/01/c3p0%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/01/c3p0%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#Oracle在c3p0的配置<br>使用c3p0链接Oracle也挺容易在拿到Oracle的账号密码与实例名还有默认的主机地址，配置起来和db.properties一样简单,但要注意c3p0-config命名并作为开始标签其次default-config再有要配置几项就有几个property<br>db.properties一般用于MyBatis的数据源的外部配置文件，导入时很简单只需要(如下)即可<br><code>&lt;properties resource=&quot;db.properties&quot;/&gt;</code>Mapper<br>而c3p0的导入无需操作，在导入c3p0包时就已经导入，无需再导入<br><code>&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</code>Spring</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = oracle.jdbc.driver.OracleDriver</span><br><span class="line">url = jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">username=c##scott</span><br><span class="line">password=tiger</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">&lt;default-config&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot;&gt;oracle.jdbc.driver.OracleDriver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:oracle:thin://localhost:1521/&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;C##SCOTT&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;tiger&lt;/property&gt;</span><br><span class="line">&lt;/default-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -c3p0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/01/hello/"/>
      <url>/2019/08/01/hello/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello-world </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
